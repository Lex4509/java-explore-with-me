{
  "info": {
    "_postman_id": "b8a338f0-48ac-42c0-917f-b3baa6a0de62",
    "name": "Test Explore With Me - feature_comments",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "_exporter_id": "23651595"
  },
  "item": [
    {
      "name": "admin",
      "item": [
        {
          "name": "Get comments by userId",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "const main = async () => {",
                  "    const api = new API(pm);",
                  "    const rnd = new RandomUtils();",
                  "",
                  "    try {",
                  "        const user = await api.addUser(rnd.getUser());",
                  "        const category = await api.addCategory(rnd.getCategory());",
                  "        const event = await api.addEvent(user.id, rnd.getEvent(category.id));",
                  "        const commentator = await api.addUser(rnd.getUser());",
                  "        pm.collectionVariables.set(\"uid\", commentator.id)",
                  "        const comment = await api.addComment(commentator.id, event.id, rnd.getComment());",
                  "        const comment2 = await api.addComment(commentator.id, event.id, rnd.getComment());",
                  "    } catch(err) {",
                  "        console.error(\"Test data error\", err);",
                  "    }",
                  "};",
                  "",
                  "const interval = setInterval(() => {}, 1000);",
                  "",
                  "setTimeout(async () => ",
                  "    {",
                  "        try {",
                  "            await main();",
                  "        } catch (e) {",
                  "            console.error(e);",
                  "        } finally {",
                  "            clearInterval(interval);",
                  "        }",
                  "    },  ",
                  "    100 ",
                  ");"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Response status 200 and json\", function () {",
                  "    pm.response.to.have.status(200);    ",
                  "    pm.response.to.be.withBody;",
                  "    pm.response.to.be.json;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/admin/comments/:userId/users?sort=DESC&from=0&size=1000",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "admin",
                "comments",
                ":userId",
                "users"
              ],
              "query": [
                {
                  "key": "sort",
                  "value": "DESC"
                },
                {
                  "key": "from",
                  "value": "0"
                },
                {
                  "key": "size",
                  "value": "1000"
                }
              ],
              "variable": [
                {
                  "key": "userId",
                  "value": "{{uid}}"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get comments by userId and eventId",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "const main = async () => {",
                  "    const api = new API(pm);",
                  "    const rnd = new RandomUtils();",
                  "",
                  "    try {",
                  "        const user = await api.addUser(rnd.getUser());",
                  "        const category = await api.addCategory(rnd.getCategory());",
                  "        const event = await api.addEvent(user.id, rnd.getEvent(category.id));",
                  "        pm.collectionVariables.set(\"eid\", event.id)",
                  "        const commentator = await api.addUser(rnd.getUser());",
                  "        pm.collectionVariables.set(\"uid\", commentator.id)",
                  "        const comment = await api.addComment(commentator.id, event.id, rnd.getComment());",
                  "        const comment2 = await api.addComment(commentator.id, event.id, rnd.getComment());",
                  "    } catch(err) {",
                  "        console.error(\"Test data error\", err);",
                  "    }",
                  "};",
                  "",
                  "const interval = setInterval(() => {}, 1000);",
                  "",
                  "setTimeout(async () => ",
                  "    {",
                  "        try {",
                  "            await main();",
                  "        } catch (e) {",
                  "            console.error(e);",
                  "        } finally {",
                  "            clearInterval(interval);",
                  "        }",
                  "    },  ",
                  "    100 ",
                  ");"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Response status 200 and json\", function () {",
                  "    pm.response.to.have.status(200);    ",
                  "    pm.response.to.be.withBody;",
                  "    pm.response.to.be.json;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/admin/comments/:userId/users/:eventId/events",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "admin",
                "comments",
                ":userId",
                "users",
                ":eventId",
                "events"
              ],
              "variable": [
                {
                  "key": "userId",
                  "value": "{{uid}}"
                },
                {
                  "key": "eventId",
                  "value": "{{eid}}"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Delete comment by admin",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "const main = async () => {",
                  "    const api = new API(pm);",
                  "    const rnd = new RandomUtils();",
                  "",
                  "    try {",
                  "        const user = await api.addUser(rnd.getUser());",
                  "        const category = await api.addCategory(rnd.getCategory());",
                  "        const event = await api.addEvent(user.id, rnd.getEvent(category.id));",
                  "        const commentator = await api.addUser(rnd.getUser());",
                  "        pm.collectionVariables.set(\"uid\", commentator.id)",
                  "        const comment = await api.addComment(commentator.id, event.id, rnd.getComment());",
                  "        pm.collectionVariables.set(\"comid\", comment.id);",
                  "    } catch(err) {",
                  "        console.error(\"Test data error\", err);",
                  "    }",
                  "};",
                  "",
                  "const interval = setInterval(() => {}, 1000);",
                  "",
                  "setTimeout(async () => ",
                  "    {",
                  "        try {",
                  "            await main();",
                  "        } catch (e) {",
                  "            console.error(e);",
                  "        } finally {",
                  "            clearInterval(interval);",
                  "        }",
                  "    },  ",
                  "    100 ",
                  ");"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Response status 204\", function () {",
                  "    pm.response.to.have.status(204);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/admin/comments/:commentId",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "admin",
                "comments",
                ":commentId"
              ],
              "variable": [
                {
                  "key": "commentId",
                  "value": "{{comid}}"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get comment by id",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "const main = async () => {",
                  "    const api = new API(pm);",
                  "    const rnd = new RandomUtils();",
                  "",
                  "    try {",
                  "        const user = await api.addUser(rnd.getUser());",
                  "        const category = await api.addCategory(rnd.getCategory());",
                  "        const event = await api.addEvent(user.id, rnd.getEvent(category.id));",
                  "        const commentator = await api.addUser(rnd.getUser());",
                  "        const comment = await api.addComment(commentator.id, event.id, rnd.getComment());",
                  "        pm.collectionVariables.set(\"comid\", comment.id);",
                  "    } catch(err) {",
                  "        console.error(\"Test data error\", err);",
                  "    }",
                  "};",
                  "",
                  "const interval = setInterval(() => {}, 1000);",
                  "",
                  "setTimeout(async () => ",
                  "    {",
                  "        try {",
                  "            await main();",
                  "        } catch (e) {",
                  "            console.error(e);",
                  "        } finally {",
                  "            clearInterval(interval);",
                  "        }",
                  "    },  ",
                  "    100 ",
                  ");"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Response status 200 and json\", function () {",
                  "    pm.response.to.have.status(200);    ",
                  "    pm.response.to.be.withBody;",
                  "    pm.response.to.be.json;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/comments/:commentId",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "comments",
                ":commentId"
              ],
              "variable": [
                {
                  "key": "commentId",
                  "value": "{{comid}}"
                }
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "public",
      "item": [
        {
          "name": "Get comments by eventId",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "const main = async () => {",
                  "    const api = new API(pm);",
                  "    const rnd = new RandomUtils();",
                  "",
                  "    try {",
                  "        const user = await api.addUser(rnd.getUser());",
                  "        const category = await api.addCategory(rnd.getCategory());",
                  "        const event = await api.addEvent(user.id, rnd.getEvent(category.id));",
                  "        pm.collectionVariables.set(\"eid\", event.id)",
                  "        const commentator = await api.addUser(rnd.getUser());",
                  "        const comment = await api.addComment(commentator.id, event.id, rnd.getComment());",
                  "        const comment2 = await api.addComment(user.id, event.id, rnd.getComment());",
                  "    } catch(err) {",
                  "        console.error(\"Test data error\", err);",
                  "    }",
                  "};",
                  "",
                  "const interval = setInterval(() => {}, 1000);",
                  "",
                  "setTimeout(async () => ",
                  "    {",
                  "        try {",
                  "            await main();",
                  "        } catch (e) {",
                  "            console.error(e);",
                  "        } finally {",
                  "            clearInterval(interval);",
                  "        }",
                  "    },  ",
                  "    100 ",
                  ");"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Response status 200 and json\", function () {",
                  "    pm.response.to.have.status(200);    ",
                  "    pm.response.to.be.withBody;",
                  "    pm.response.to.be.json;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/comments/:eventId/?sort=DESC&from=0&size=1000",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "comments",
                ":eventId",
                ""
              ],
              "query": [
                {
                  "key": "sort",
                  "value": "DESC"
                },
                {
                  "key": "from",
                  "value": "0"
                },
                {
                  "key": "size",
                  "value": "1000"
                }
              ],
              "variable": [
                {
                  "key": "eventId",
                  "value": "{{eid}}"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get filtered comments",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "const main = async () => {",
                  "    const api = new API(pm);",
                  "    const rnd = new RandomUtils();",
                  "",
                  "    try {",
                  "        const user = await api.addUser(rnd.getUser());",
                  "        const category = await api.addCategory(rnd.getCategory());",
                  "        const event = await api.addEvent(user.id, rnd.getEvent(category.id));",
                  "        const commentator = await api.addUser(rnd.getUser());",
                  "        const comment = await api.addComment(commentator.id, event.id, rnd.getComment());",
                  "        const comment2 = await api.addComment(commentator.id, event.id, rnd.getComment());",
                  "        const comment3 = await api.addComment(commentator.id, event.id, rnd.getComment());",
                  "    } catch(err) {",
                  "        console.error(\"Test data error\", err);",
                  "    }",
                  "};",
                  "",
                  "const interval = setInterval(() => {}, 1000);",
                  "",
                  "setTimeout(async () => ",
                  "    {",
                  "        try {",
                  "            await main();",
                  "        } catch (e) {",
                  "            console.error(e);",
                  "        } finally {",
                  "            clearInterval(interval);",
                  "        }",
                  "    },  ",
                  "    100 ",
                  ");"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Response status 200 and json\", function () {",
                  "    pm.response.to.have.status(200);    ",
                  "    pm.response.to.be.withBody;",
                  "    pm.response.to.be.json;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/comments?text= &startDate=2020-01-01%2013%3A30%3A38&endDate=2030-01-01%2013%3A30%3A38&sortOrder=DESC",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "comments"
              ],
              "query": [
                {
                  "key": "text",
                  "value": " "
                },
                {
                  "key": "startDate",
                  "value": "2020-01-01%2013%3A30%3A38"
                },
                {
                  "key": "endDate",
                  "value": "2030-01-01%2013%3A30%3A38"
                },
                {
                  "key": "sortOrder",
                  "value": "DESC"
                }
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "private",
      "item": [
        {
          "name": "Update comment",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "const main = async () => {",
                  "    const api = new API(pm);",
                  "    const rnd = new RandomUtils();",
                  "",
                  "    try {",
                  "        const user = await api.addUser(rnd.getUser());",
                  "        const category = await api.addCategory(rnd.getCategory());",
                  "        const event = await api.addEvent(user.id, rnd.getEvent(category.id));",
                  "        const commentator = await api.addUser(rnd.getUser());",
                  "        pm.collectionVariables.set(\"uid\", commentator.id)",
                  "",
                  "        const comment = await api.addComment(commentator.id, event.id, rnd.getComment());",
                  "        pm.collectionVariables.set(\"comid\", comment.id);",
                  "",
                  "        pm.request.body.update({",
                  "        mode: 'raw',",
                  "        raw: JSON.stringify(rnd.getComment()),",
                  "        options: { raw: { language: 'json' } }",
                  "        });",
                  "",
                  "    } catch(err) {",
                  "        console.error(\"Test data error\", err);",
                  "    }",
                  "};",
                  "",
                  "const interval = setInterval(() => {}, 1000);",
                  "",
                  "setTimeout(async () => ",
                  "    {",
                  "        try {",
                  "            await main();",
                  "        } catch (e) {",
                  "            console.error(e);",
                  "        } finally {",
                  "            clearInterval(interval);",
                  "        }",
                  "    },  ",
                  "    100 ",
                  ");"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Response status 200 and json\", function () {",
                  "    pm.response.to.have.status(200);    ",
                  "    pm.response.to.be.withBody;",
                  "    pm.response.to.be.json;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PATCH",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{{request_body}}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/users/:userId/comments/:commentId",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "users",
                ":userId",
                "comments",
                ":commentId"
              ],
              "variable": [
                {
                  "key": "userId",
                  "value": "{{uid}}"
                },
                {
                  "key": "commentId",
                  "value": "{{comid}}"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Delete comment by user",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "const main = async () => {",
                  "    const api = new API(pm);",
                  "    const rnd = new RandomUtils();",
                  "",
                  "    try {",
                  "        const user = await api.addUser(rnd.getUser());",
                  "        const category = await api.addCategory(rnd.getCategory());",
                  "        const event = await api.addEvent(user.id, rnd.getEvent(category.id));",
                  "        const commentator = await api.addUser(rnd.getUser());",
                  "        pm.collectionVariables.set(\"uid\", commentator.id)",
                  "        const comment = await api.addComment(commentator.id, event.id, rnd.getComment());",
                  "        pm.collectionVariables.set(\"comid\", comment.id);",
                  "    } catch(err) {",
                  "        console.error(\"Test data error\", err);",
                  "    }",
                  "};",
                  "",
                  "const interval = setInterval(() => {}, 1000);",
                  "",
                  "setTimeout(async () => ",
                  "    {",
                  "        try {",
                  "            await main();",
                  "        } catch (e) {",
                  "            console.error(e);",
                  "        } finally {",
                  "            clearInterval(interval);",
                  "        }",
                  "    },  ",
                  "    100 ",
                  ");"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Response status 204\", function () {",
                  "    pm.response.to.have.status(204);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/users/:userId/comments/:commentId",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "users",
                ":userId",
                "comments",
                ":commentId"
              ],
              "variable": [
                {
                  "key": "userId",
                  "value": "{{uid}}"
                },
                {
                  "key": "commentId",
                  "value": "{{comid}}"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Create new comment",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "const main = async () => {",
                  "    const api = new API(pm);",
                  "    const rnd = new RandomUtils();",
                  "",
                  "    try {",
                  "        const user = await api.addUser(rnd.getUser());",
                  "        const category = await api.addCategory(rnd.getCategory());",
                  "        const event = await api.addEvent(user.id, rnd.getEvent(category.id));",
                  "        pm.collectionVariables.set(\"eid\", event.id);",
                  "        const commentator = await api.addUser(rnd.getUser());",
                  "        pm.collectionVariables.set(\"uid\", commentator.id);",
                  "",
                  "    } catch(err) {",
                  "        console.error(\"Test data error\", err);",
                  "    }",
                  "};",
                  "",
                  "const interval = setInterval(() => {}, 1000);",
                  "",
                  "setTimeout(async () => ",
                  "    {",
                  "        try {",
                  "            await main();",
                  "        } catch (e) {",
                  "            console.error(e);",
                  "        } finally {",
                  "            clearInterval(interval);",
                  "        }",
                  "    },  ",
                  "    100 ",
                  ");"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Response status 201 and json\", function () {",
                  "    pm.response.to.have.status(201);  ",
                  "    pm.response.to.be.withBody;",
                  "    pm.response.to.be.json;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\"text\": \"test comment\"}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/users/:userId/comments/:eventId",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "users",
                ":userId",
                "comments",
                ":eventId"
              ],
              "variable": [
                {
                  "key": "userId",
                  "value": "{{uid}}"
                },
                {
                  "key": "eventId",
                  "value": "{{eid}}"
                }
              ]
            }
          },
          "response": []
        }
      ]
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "API = class {",
          "    constructor(postman, verbose = false, baseUrl = \"http://localhost:8080\") {",
          "        this.baseUrl = baseUrl;",
          "        this.pm = postman;",
          "        this._verbose = verbose;",
          "    }",
          "",
          "    async addUser(user, verbose=null) {",
          "        return this.post(\"/admin/users\", user, \"Ошибка при добавлении нового пользователя: \", verbose);",
          "    }",
          "",
          "    async addCategory(category, verbose=null) {",
          "        return this.post(\"/admin/categories\", category, \"Ошибка при добавлении новой категории: \", verbose);",
          "    }",
          "",
          "    async addEvent(userId, event, verbose=null) {",
          "        return this.post(\"/users/\" + userId + \"/events\", event, \"Ошибка при добавлении нового события: \", verbose);",
          "    }",
          "",
          "    async addComment(userId, eventId, comment, verbose=null) {",
          "        return this.post(\"/users/\" + userId + \"/comments/\" + eventId, comment, \"Ошибка при добавлении нового комментария: \", verbose);",
          "    }",
          "",
          "    async post(path, body, errorText = \"Ошибка при выполнении post-запроса: \", verbose=null) {",
          "        return this.sendRequest(\"POST\", path, body, errorText, verbose);",
          "    }",
          "",
          "    async sendRequest(method, path, body=null, errorText = \"Ошибка при выполнении запроса: \", verbose=null) {",
          "        return new Promise((resolve, reject) => {",
          "            verbose = verbose == null ? this._verbose : verbose;",
          "",
          "            const request = {",
          "                url: this.baseUrl + path,",
          "                method: method,",
          "                body: body == null ? \"\" : JSON.stringify(body),",
          "                header: { \"Content-Type\": \"application/json\" },",
          "            };",
          "",
          "            if(verbose) {",
          "                console.log(\"Отправляю запрос: \", request);",
          "            }",
          "",
          "            try {",
          "                this.pm.sendRequest(request, (error, response) => {",
          "                    if(error || (response.code >= 400 && response.code <= 599)) {",
          "                        let err = error ? error : JSON.stringify(response.json());",
          "                        console.error(\"При выполнении запроса к серверу возникла ошика.\\n\", err,",
          "                             \"\\nДля отладки проблемы повторите такой же запрос к вашей программе \" + ",
          "                             \"на локальном компьютере. Данные запроса:\\n\", JSON.stringify(request));",
          "",
          "                        reject(new Error(errorText + err));",
          "                    }",
          "",
          "                    if(verbose) {",
          "                        console.log(\"Результат обработки запроса: код состояния - \", response.code, \", тело: \", response.json());",
          "                    }",
          "",
          "                    resolve(response.json());",
          "                });",
          "            } catch(err) {",
          "                if(verbose) {",
          "                    console.error(errorText, err);",
          "                }",
          "                return Promise.reject(err);",
          "            }",
          "        });",
          "    }",
          "",
          "};",
          "",
          "RandomUtils = class {",
          "    constructor() {}",
          "",
          "    getUser() {",
          "        return {",
          "            name: pm.variables.replaceIn('{{$randomFullName}}'),",
          "            email: pm.variables.replaceIn('{{$randomEmail}}')",
          "        };",
          "    }",
          "",
          "    getCategory() {",
          "        return {",
          "            name: pm.variables.replaceIn('{{$randomWord}}') + Math.floor(Math.random() * 100).toString()",
          "        };",
          "    }",
          "",
          "    getEvent(categoryId) {",
          "        return {",
          "            annotation: pm.variables.replaceIn('{{$randomLoremParagraph}}'),",
          "            category: categoryId,",
          "            description: pm.variables.replaceIn('{{$randomLoremParagraphs}}'),",
          "            eventDate: this.getFutureDateTime(),",
          "            location: {",
          "                lat: parseFloat(pm.variables.replaceIn('{{$randomLatitude}}')),",
          "                lon: parseFloat(pm.variables.replaceIn('{{$randomLongitude}}')),",
          "            },",
          "            paid: pm.variables.replaceIn('{{$randomBoolean}}'),",
          "            participantLimit: pm.variables.replaceIn('{{$randomInt}}'),",
          "            requestModeration: pm.variables.replaceIn('{{$randomBoolean}}'),",
          "            title: pm.variables.replaceIn('{{$randomLoremSentence}}'),",
          "        }",
          "    }",
          "",
          "    getComment() {",
          "        return {",
          "            text: pm.variables.replaceIn('{{$randomLoremSentence}}')",
          "        };",
          "    }",
          "",
          "    getFutureDateTime(hourShift = 24, minuteShift=0, yearShift=0) {",
          "        let moment = require('moment');",
          "",
          "        let m = moment();",
          "        m.add(hourShift, 'hour');",
          "        m.add(minuteShift, 'minute');",
          "        m.add(yearShift, 'year');",
          "",
          "        return m.format('YYYY-MM-DD HH:mm:ss');",
          "    }",
          "",
          "}"
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          ""
        ]
      }
    }
  ],
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:8080",
      "type": "default"
    },
    {
      "key": "usersCount",
      "value": "1",
      "type": "default"
    },
    {
      "key": "catid",
      "value": "1",
      "type": "default"
    },
    {
      "key": "request_body",
      "value": "",
      "type": "default"
    },
    {
      "key": "mail",
      "value": "",
      "type": "default"
    },
    {
      "key": "response",
      "value": "",
      "type": "default"
    },
    {
      "key": "uid",
      "value": "1",
      "type": "default"
    },
    {
      "key": "compid",
      "value": "1",
      "type": "default"
    },
    {
      "key": "catId",
      "value": "",
      "type": "default"
    },
    {
      "key": "comId",
      "value": "1",
      "type": "default"
    },
    {
      "key": "eid",
      "value": "1",
      "type": "string"
    },
    {
      "key": "comid",
      "value": ""
    }
  ]
}